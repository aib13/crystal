// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesh.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mesh.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PCoordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PCoordinate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBound_reflection_ = NULL;
const ::google::protobuf::Descriptor* PStructured2DGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PStructured2DGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNeighbours_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNeighbours_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* PStructuredNodeRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PStructuredNodeRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PStructuredCellRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PStructuredCellRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PUnstructuredCellRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PUnstructuredCellRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PStructuredEdgeRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PStructuredEdgeRegion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mesh_2eproto() {
  protobuf_AddDesc_mesh_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mesh.proto");
  GOOGLE_CHECK(file != NULL);
  PData_descriptor_ = file->message_type(0);
  static const int PData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PData, data_),
  };
  PData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PData_descriptor_,
      PData::default_instance_,
      PData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PData));
  PCoordinate_descriptor_ = file->message_type(1);
  static const int PCoordinate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCoordinate, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCoordinate, y_),
  };
  PCoordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PCoordinate_descriptor_,
      PCoordinate::default_instance_,
      PCoordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCoordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCoordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PCoordinate));
  PBound_descriptor_ = file->message_type(2);
  static const int PBound_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBound, bound_),
  };
  PBound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBound_descriptor_,
      PBound::default_instance_,
      PBound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBound));
  PStructured2DGrid_descriptor_ = file->message_type(3);
  static const int PStructured2DGrid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructured2DGrid, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructured2DGrid, num_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructured2DGrid, indices_),
  };
  PStructured2DGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PStructured2DGrid_descriptor_,
      PStructured2DGrid::default_instance_,
      PStructured2DGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructured2DGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructured2DGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PStructured2DGrid));
  PNeighbours_descriptor_ = file->message_type(4);
  static const int PNeighbours_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNeighbours, element_id_),
  };
  PNeighbours_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNeighbours_descriptor_,
      PNeighbours::default_instance_,
      PNeighbours_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNeighbours, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNeighbours, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNeighbours));
  PMesh_descriptor_ = file->message_type(5);
  static const int PMesh_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMesh, num_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMesh, node2coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMesh, node2data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMesh, node2node_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMesh, structured_region_),
  };
  PMesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMesh_descriptor_,
      PMesh::default_instance_,
      PMesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMesh));
  PStructuredNodeRegion_descriptor_ = file->message_type(6);
  static const int PStructuredNodeRegion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredNodeRegion, region_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredNodeRegion, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredNodeRegion, num_cols_),
  };
  PStructuredNodeRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PStructuredNodeRegion_descriptor_,
      PStructuredNodeRegion::default_instance_,
      PStructuredNodeRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredNodeRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredNodeRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PStructuredNodeRegion));
  PStructuredCellRegion_descriptor_ = file->message_type(7);
  static const int PStructuredCellRegion_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredCellRegion, cell2node_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredCellRegion, node_row_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredCellRegion, node_row_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredCellRegion, node_col_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredCellRegion, node_col_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredCellRegion, compass_),
  };
  PStructuredCellRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PStructuredCellRegion_descriptor_,
      PStructuredCellRegion::default_instance_,
      PStructuredCellRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredCellRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredCellRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PStructuredCellRegion));
  PUnstructuredCellRegion_descriptor_ = file->message_type(8);
  static const int PUnstructuredCellRegion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUnstructuredCellRegion, num_unstructured_cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUnstructuredCellRegion, unstructured_cells_offset_),
  };
  PUnstructuredCellRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PUnstructuredCellRegion_descriptor_,
      PUnstructuredCellRegion::default_instance_,
      PUnstructuredCellRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUnstructuredCellRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUnstructuredCellRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PUnstructuredCellRegion));
  PStructuredEdgeRegion_descriptor_ = file->message_type(9);
  static const int PStructuredEdgeRegion_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredEdgeRegion, inedge2node_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredEdgeRegion, node_row_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredEdgeRegion, node_row_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredEdgeRegion, node_col_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredEdgeRegion, node_col_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredEdgeRegion, node_compass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredEdgeRegion, cell_compass_),
  };
  PStructuredEdgeRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PStructuredEdgeRegion_descriptor_,
      PStructuredEdgeRegion::default_instance_,
      PStructuredEdgeRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredEdgeRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PStructuredEdgeRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PStructuredEdgeRegion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mesh_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PData_descriptor_, &PData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PCoordinate_descriptor_, &PCoordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBound_descriptor_, &PBound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PStructured2DGrid_descriptor_, &PStructured2DGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNeighbours_descriptor_, &PNeighbours::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMesh_descriptor_, &PMesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PStructuredNodeRegion_descriptor_, &PStructuredNodeRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PStructuredCellRegion_descriptor_, &PStructuredCellRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PUnstructuredCellRegion_descriptor_, &PUnstructuredCellRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PStructuredEdgeRegion_descriptor_, &PStructuredEdgeRegion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mesh_2eproto() {
  delete PData::default_instance_;
  delete PData_reflection_;
  delete PCoordinate::default_instance_;
  delete PCoordinate_reflection_;
  delete PBound::default_instance_;
  delete PBound_reflection_;
  delete PStructured2DGrid::default_instance_;
  delete PStructured2DGrid_reflection_;
  delete PNeighbours::default_instance_;
  delete PNeighbours_reflection_;
  delete PMesh::default_instance_;
  delete PMesh_reflection_;
  delete PStructuredNodeRegion::default_instance_;
  delete PStructuredNodeRegion_reflection_;
  delete PStructuredCellRegion::default_instance_;
  delete PStructuredCellRegion_reflection_;
  delete PUnstructuredCellRegion::default_instance_;
  delete PUnstructuredCellRegion_reflection_;
  delete PStructuredEdgeRegion::default_instance_;
  delete PStructuredEdgeRegion_reflection_;
}

void protobuf_AddDesc_mesh_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmesh.proto\"\025\n\005PData\022\014\n\004data\030\001 \001(\005\"#\n\013P"
    "Coordinate\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\"\027\n\006PBou"
    "nd\022\r\n\005bound\030\001 \002(\005\"H\n\021PStructured2DGrid\022\020"
    "\n\010num_rows\030\001 \002(\005\022\020\n\010num_cols\030\002 \002(\005\022\017\n\007in"
    "dices\030\003 \003(\005\"!\n\013PNeighbours\022\022\n\nelement_id"
    "\030\001 \003(\005\"\260\001\n\005PMesh\022\021\n\tnum_nodes\030\001 \002(\005\022%\n\017n"
    "ode2coordinate\030\002 \003(\0132\014.PCoordinate\022\031\n\tno"
    "de2data\030\003 \003(\0132\006.PData\022#\n\rnode2node_map\030\004"
    " \003(\0132\014.PNeighbours\022-\n\021structured_region\030"
    "\005 \003(\0132\022.PStructured2DGrid\"R\n\025PStructured"
    "NodeRegion\022\025\n\rregion_number\030\001 \002(\005\022\020\n\010num"
    "_rows\030\002 \002(\005\022\020\n\010num_cols\030\003 \002(\005\"\244\001\n\025PStruc"
    "turedCellRegion\022\030\n\020cell2node_offset\030\001 \002("
    "\005\022\026\n\016node_row_start\030\002 \002(\005\022\027\n\017node_row_fi"
    "nish\030\003 \002(\005\022\026\n\016node_col_start\030\004 \002(\005\022\027\n\017no"
    "de_col_finish\030\005 \002(\005\022\017\n\007compass\030\006 \003(\005\"\\\n\027"
    "PUnstructuredCellRegion\022\036\n\026num_unstructu"
    "red_cells\030\001 \002(\005\022!\n\031unstructured_cells_of"
    "fset\030\002 \002(\005\"\301\001\n\025PStructuredEdgeRegion\022\032\n\022"
    "inedge2node_offset\030\001 \002(\005\022\026\n\016node_row_sta"
    "rt\030\002 \002(\005\022\027\n\017node_row_finish\030\003 \002(\005\022\026\n\016nod"
    "e_col_start\030\004 \002(\005\022\027\n\017node_col_finish\030\005 \002"
    "(\005\022\024\n\014node_compass\030\006 \003(\005\022\024\n\014cell_compass"
    "\030\007 \003(\005", 926);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mesh.proto", &protobuf_RegisterTypes);
  PData::default_instance_ = new PData();
  PCoordinate::default_instance_ = new PCoordinate();
  PBound::default_instance_ = new PBound();
  PStructured2DGrid::default_instance_ = new PStructured2DGrid();
  PNeighbours::default_instance_ = new PNeighbours();
  PMesh::default_instance_ = new PMesh();
  PStructuredNodeRegion::default_instance_ = new PStructuredNodeRegion();
  PStructuredCellRegion::default_instance_ = new PStructuredCellRegion();
  PUnstructuredCellRegion::default_instance_ = new PUnstructuredCellRegion();
  PStructuredEdgeRegion::default_instance_ = new PStructuredEdgeRegion();
  PData::default_instance_->InitAsDefaultInstance();
  PCoordinate::default_instance_->InitAsDefaultInstance();
  PBound::default_instance_->InitAsDefaultInstance();
  PStructured2DGrid::default_instance_->InitAsDefaultInstance();
  PNeighbours::default_instance_->InitAsDefaultInstance();
  PMesh::default_instance_->InitAsDefaultInstance();
  PStructuredNodeRegion::default_instance_->InitAsDefaultInstance();
  PStructuredCellRegion::default_instance_->InitAsDefaultInstance();
  PUnstructuredCellRegion::default_instance_->InitAsDefaultInstance();
  PStructuredEdgeRegion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mesh_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mesh_2eproto {
  StaticDescriptorInitializer_mesh_2eproto() {
    protobuf_AddDesc_mesh_2eproto();
  }
} static_descriptor_initializer_mesh_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PData::kDataFieldNumber;
#endif  // !_MSC_VER

PData::PData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PData::InitAsDefaultInstance() {
}

PData::PData(const PData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PData::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PData::~PData() {
  SharedDtor();
}

void PData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PData_descriptor_;
}

const PData& PData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PData* PData::default_instance_ = NULL;

PData* PData::New() const {
  return new PData;
}

void PData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PData::MergeFrom(const PData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PData::CopyFrom(const PData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PData::IsInitialized() const {

  return true;
}

void PData::Swap(PData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PData_descriptor_;
  metadata.reflection = PData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PCoordinate::kXFieldNumber;
const int PCoordinate::kYFieldNumber;
#endif  // !_MSC_VER

PCoordinate::PCoordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PCoordinate::InitAsDefaultInstance() {
}

PCoordinate::PCoordinate(const PCoordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PCoordinate::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PCoordinate::~PCoordinate() {
  SharedDtor();
}

void PCoordinate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PCoordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PCoordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PCoordinate_descriptor_;
}

const PCoordinate& PCoordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PCoordinate* PCoordinate::default_instance_ = NULL;

PCoordinate* PCoordinate::New() const {
  return new PCoordinate;
}

void PCoordinate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PCoordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PCoordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PCoordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PCoordinate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PCoordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PCoordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PCoordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PCoordinate::MergeFrom(const PCoordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PCoordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PCoordinate::CopyFrom(const PCoordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCoordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PCoordinate::Swap(PCoordinate* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PCoordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PCoordinate_descriptor_;
  metadata.reflection = PCoordinate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBound::kBoundFieldNumber;
#endif  // !_MSC_VER

PBound::PBound()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBound::InitAsDefaultInstance() {
}

PBound::PBound(const PBound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBound::SharedCtor() {
  _cached_size_ = 0;
  bound_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBound::~PBound() {
  SharedDtor();
}

void PBound::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBound_descriptor_;
}

const PBound& PBound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PBound* PBound::default_instance_ = NULL;

PBound* PBound::New() const {
  return new PBound;
}

void PBound::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bound_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bound = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bound_)));
          set_has_bound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bound = 1;
  if (has_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bound(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bound = 1;
  if (has_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bound(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bound = 1;
    if (has_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bound());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBound::MergeFrom(const PBound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bound()) {
      set_bound(from.bound());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBound::CopyFrom(const PBound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBound::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBound::Swap(PBound* other) {
  if (other != this) {
    std::swap(bound_, other->bound_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBound_descriptor_;
  metadata.reflection = PBound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PStructured2DGrid::kNumRowsFieldNumber;
const int PStructured2DGrid::kNumColsFieldNumber;
const int PStructured2DGrid::kIndicesFieldNumber;
#endif  // !_MSC_VER

PStructured2DGrid::PStructured2DGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PStructured2DGrid::InitAsDefaultInstance() {
}

PStructured2DGrid::PStructured2DGrid(const PStructured2DGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PStructured2DGrid::SharedCtor() {
  _cached_size_ = 0;
  num_rows_ = 0;
  num_cols_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PStructured2DGrid::~PStructured2DGrid() {
  SharedDtor();
}

void PStructured2DGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PStructured2DGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PStructured2DGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PStructured2DGrid_descriptor_;
}

const PStructured2DGrid& PStructured2DGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PStructured2DGrid* PStructured2DGrid::default_instance_ = NULL;

PStructured2DGrid* PStructured2DGrid::New() const {
  return new PStructured2DGrid;
}

void PStructured2DGrid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_rows_ = 0;
    num_cols_ = 0;
  }
  indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PStructured2DGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rows_)));
          set_has_num_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_cols;
        break;
      }

      // required int32 num_cols = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cols_)));
          set_has_num_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_indices;
        break;
      }

      // repeated int32 indices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_indices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_indices;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PStructured2DGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num_rows = 1;
  if (has_num_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_rows(), output);
  }

  // required int32 num_cols = 2;
  if (has_num_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_cols(), output);
  }

  // repeated int32 indices = 3;
  for (int i = 0; i < this->indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->indices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PStructured2DGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num_rows = 1;
  if (has_num_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_rows(), target);
  }

  // required int32 num_cols = 2;
  if (has_num_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_cols(), target);
  }

  // repeated int32 indices = 3;
  for (int i = 0; i < this->indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->indices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PStructured2DGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num_rows = 1;
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_rows());
    }

    // required int32 num_cols = 2;
    if (has_num_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_cols());
    }

  }
  // repeated int32 indices = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indices(i));
    }
    total_size += 1 * this->indices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PStructured2DGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PStructured2DGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PStructured2DGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PStructured2DGrid::MergeFrom(const PStructured2DGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  indices_.MergeFrom(from.indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_rows()) {
      set_num_rows(from.num_rows());
    }
    if (from.has_num_cols()) {
      set_num_cols(from.num_cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PStructured2DGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PStructured2DGrid::CopyFrom(const PStructured2DGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PStructured2DGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PStructured2DGrid::Swap(PStructured2DGrid* other) {
  if (other != this) {
    std::swap(num_rows_, other->num_rows_);
    std::swap(num_cols_, other->num_cols_);
    indices_.Swap(&other->indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PStructured2DGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PStructured2DGrid_descriptor_;
  metadata.reflection = PStructured2DGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNeighbours::kElementIdFieldNumber;
#endif  // !_MSC_VER

PNeighbours::PNeighbours()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNeighbours::InitAsDefaultInstance() {
}

PNeighbours::PNeighbours(const PNeighbours& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNeighbours::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNeighbours::~PNeighbours() {
  SharedDtor();
}

void PNeighbours::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PNeighbours::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNeighbours::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNeighbours_descriptor_;
}

const PNeighbours& PNeighbours::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PNeighbours* PNeighbours::default_instance_ = NULL;

PNeighbours* PNeighbours::New() const {
  return new PNeighbours;
}

void PNeighbours::Clear() {
  element_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNeighbours::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 element_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_element_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_element_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_element_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNeighbours::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 element_id = 1;
  for (int i = 0; i < this->element_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->element_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNeighbours::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 element_id = 1;
  for (int i = 0; i < this->element_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->element_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNeighbours::ByteSize() const {
  int total_size = 0;

  // repeated int32 element_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->element_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->element_id(i));
    }
    total_size += 1 * this->element_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNeighbours::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNeighbours* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNeighbours*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNeighbours::MergeFrom(const PNeighbours& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_id_.MergeFrom(from.element_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNeighbours::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNeighbours::CopyFrom(const PNeighbours& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNeighbours::IsInitialized() const {

  return true;
}

void PNeighbours::Swap(PNeighbours* other) {
  if (other != this) {
    element_id_.Swap(&other->element_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNeighbours::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNeighbours_descriptor_;
  metadata.reflection = PNeighbours_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMesh::kNumNodesFieldNumber;
const int PMesh::kNode2CoordinateFieldNumber;
const int PMesh::kNode2DataFieldNumber;
const int PMesh::kNode2NodeMapFieldNumber;
const int PMesh::kStructuredRegionFieldNumber;
#endif  // !_MSC_VER

PMesh::PMesh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PMesh::InitAsDefaultInstance() {
}

PMesh::PMesh(const PMesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PMesh::SharedCtor() {
  _cached_size_ = 0;
  num_nodes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMesh::~PMesh() {
  SharedDtor();
}

void PMesh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMesh_descriptor_;
}

const PMesh& PMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PMesh* PMesh::default_instance_ = NULL;

PMesh* PMesh::New() const {
  return new PMesh;
}

void PMesh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_nodes_ = 0;
  }
  node2coordinate_.Clear();
  node2data_.Clear();
  node2node_map_.Clear();
  structured_region_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_nodes_)));
          set_has_num_nodes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node2coordinate;
        break;
      }

      // repeated .PCoordinate node2coordinate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node2coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node2coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node2coordinate;
        if (input->ExpectTag(26)) goto parse_node2data;
        break;
      }

      // repeated .PData node2data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node2data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node2data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node2data;
        if (input->ExpectTag(34)) goto parse_node2node_map;
        break;
      }

      // repeated .PNeighbours node2node_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node2node_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node2node_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_node2node_map;
        if (input->ExpectTag(42)) goto parse_structured_region;
        break;
      }

      // repeated .PStructured2DGrid structured_region = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_structured_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_structured_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_structured_region;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num_nodes = 1;
  if (has_num_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_nodes(), output);
  }

  // repeated .PCoordinate node2coordinate = 2;
  for (int i = 0; i < this->node2coordinate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node2coordinate(i), output);
  }

  // repeated .PData node2data = 3;
  for (int i = 0; i < this->node2data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node2data(i), output);
  }

  // repeated .PNeighbours node2node_map = 4;
  for (int i = 0; i < this->node2node_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->node2node_map(i), output);
  }

  // repeated .PStructured2DGrid structured_region = 5;
  for (int i = 0; i < this->structured_region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->structured_region(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PMesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num_nodes = 1;
  if (has_num_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_nodes(), target);
  }

  // repeated .PCoordinate node2coordinate = 2;
  for (int i = 0; i < this->node2coordinate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node2coordinate(i), target);
  }

  // repeated .PData node2data = 3;
  for (int i = 0; i < this->node2data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node2data(i), target);
  }

  // repeated .PNeighbours node2node_map = 4;
  for (int i = 0; i < this->node2node_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->node2node_map(i), target);
  }

  // repeated .PStructured2DGrid structured_region = 5;
  for (int i = 0; i < this->structured_region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->structured_region(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PMesh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num_nodes = 1;
    if (has_num_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_nodes());
    }

  }
  // repeated .PCoordinate node2coordinate = 2;
  total_size += 1 * this->node2coordinate_size();
  for (int i = 0; i < this->node2coordinate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node2coordinate(i));
  }

  // repeated .PData node2data = 3;
  total_size += 1 * this->node2data_size();
  for (int i = 0; i < this->node2data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node2data(i));
  }

  // repeated .PNeighbours node2node_map = 4;
  total_size += 1 * this->node2node_map_size();
  for (int i = 0; i < this->node2node_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node2node_map(i));
  }

  // repeated .PStructured2DGrid structured_region = 5;
  total_size += 1 * this->structured_region_size();
  for (int i = 0; i < this->structured_region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->structured_region(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMesh::MergeFrom(const PMesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  node2coordinate_.MergeFrom(from.node2coordinate_);
  node2data_.MergeFrom(from.node2data_);
  node2node_map_.MergeFrom(from.node2node_map_);
  structured_region_.MergeFrom(from.structured_region_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_nodes()) {
      set_num_nodes(from.num_nodes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMesh::CopyFrom(const PMesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMesh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < node2coordinate_size(); i++) {
    if (!this->node2coordinate(i).IsInitialized()) return false;
  }
  for (int i = 0; i < structured_region_size(); i++) {
    if (!this->structured_region(i).IsInitialized()) return false;
  }
  return true;
}

void PMesh::Swap(PMesh* other) {
  if (other != this) {
    std::swap(num_nodes_, other->num_nodes_);
    node2coordinate_.Swap(&other->node2coordinate_);
    node2data_.Swap(&other->node2data_);
    node2node_map_.Swap(&other->node2node_map_);
    structured_region_.Swap(&other->structured_region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMesh_descriptor_;
  metadata.reflection = PMesh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PStructuredNodeRegion::kRegionNumberFieldNumber;
const int PStructuredNodeRegion::kNumRowsFieldNumber;
const int PStructuredNodeRegion::kNumColsFieldNumber;
#endif  // !_MSC_VER

PStructuredNodeRegion::PStructuredNodeRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PStructuredNodeRegion::InitAsDefaultInstance() {
}

PStructuredNodeRegion::PStructuredNodeRegion(const PStructuredNodeRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PStructuredNodeRegion::SharedCtor() {
  _cached_size_ = 0;
  region_number_ = 0;
  num_rows_ = 0;
  num_cols_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PStructuredNodeRegion::~PStructuredNodeRegion() {
  SharedDtor();
}

void PStructuredNodeRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PStructuredNodeRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PStructuredNodeRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PStructuredNodeRegion_descriptor_;
}

const PStructuredNodeRegion& PStructuredNodeRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PStructuredNodeRegion* PStructuredNodeRegion::default_instance_ = NULL;

PStructuredNodeRegion* PStructuredNodeRegion::New() const {
  return new PStructuredNodeRegion;
}

void PStructuredNodeRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_number_ = 0;
    num_rows_ = 0;
    num_cols_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PStructuredNodeRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 region_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_number_)));
          set_has_region_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_rows;
        break;
      }

      // required int32 num_rows = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rows_)));
          set_has_num_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_cols;
        break;
      }

      // required int32 num_cols = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cols_)));
          set_has_num_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PStructuredNodeRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 region_number = 1;
  if (has_region_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_number(), output);
  }

  // required int32 num_rows = 2;
  if (has_num_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_rows(), output);
  }

  // required int32 num_cols = 3;
  if (has_num_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_cols(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PStructuredNodeRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 region_number = 1;
  if (has_region_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_number(), target);
  }

  // required int32 num_rows = 2;
  if (has_num_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_rows(), target);
  }

  // required int32 num_cols = 3;
  if (has_num_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_cols(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PStructuredNodeRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 region_number = 1;
    if (has_region_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_number());
    }

    // required int32 num_rows = 2;
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_rows());
    }

    // required int32 num_cols = 3;
    if (has_num_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_cols());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PStructuredNodeRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PStructuredNodeRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PStructuredNodeRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PStructuredNodeRegion::MergeFrom(const PStructuredNodeRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_number()) {
      set_region_number(from.region_number());
    }
    if (from.has_num_rows()) {
      set_num_rows(from.num_rows());
    }
    if (from.has_num_cols()) {
      set_num_cols(from.num_cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PStructuredNodeRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PStructuredNodeRegion::CopyFrom(const PStructuredNodeRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PStructuredNodeRegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PStructuredNodeRegion::Swap(PStructuredNodeRegion* other) {
  if (other != this) {
    std::swap(region_number_, other->region_number_);
    std::swap(num_rows_, other->num_rows_);
    std::swap(num_cols_, other->num_cols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PStructuredNodeRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PStructuredNodeRegion_descriptor_;
  metadata.reflection = PStructuredNodeRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PStructuredCellRegion::kCell2NodeOffsetFieldNumber;
const int PStructuredCellRegion::kNodeRowStartFieldNumber;
const int PStructuredCellRegion::kNodeRowFinishFieldNumber;
const int PStructuredCellRegion::kNodeColStartFieldNumber;
const int PStructuredCellRegion::kNodeColFinishFieldNumber;
const int PStructuredCellRegion::kCompassFieldNumber;
#endif  // !_MSC_VER

PStructuredCellRegion::PStructuredCellRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PStructuredCellRegion::InitAsDefaultInstance() {
}

PStructuredCellRegion::PStructuredCellRegion(const PStructuredCellRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PStructuredCellRegion::SharedCtor() {
  _cached_size_ = 0;
  cell2node_offset_ = 0;
  node_row_start_ = 0;
  node_row_finish_ = 0;
  node_col_start_ = 0;
  node_col_finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PStructuredCellRegion::~PStructuredCellRegion() {
  SharedDtor();
}

void PStructuredCellRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PStructuredCellRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PStructuredCellRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PStructuredCellRegion_descriptor_;
}

const PStructuredCellRegion& PStructuredCellRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PStructuredCellRegion* PStructuredCellRegion::default_instance_ = NULL;

PStructuredCellRegion* PStructuredCellRegion::New() const {
  return new PStructuredCellRegion;
}

void PStructuredCellRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell2node_offset_ = 0;
    node_row_start_ = 0;
    node_row_finish_ = 0;
    node_col_start_ = 0;
    node_col_finish_ = 0;
  }
  compass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PStructuredCellRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cell2node_offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell2node_offset_)));
          set_has_cell2node_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_row_start;
        break;
      }

      // required int32 node_row_start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_row_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_row_start_)));
          set_has_node_row_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_node_row_finish;
        break;
      }

      // required int32 node_row_finish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_row_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_row_finish_)));
          set_has_node_row_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_node_col_start;
        break;
      }

      // required int32 node_col_start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_col_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_col_start_)));
          set_has_node_col_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_node_col_finish;
        break;
      }

      // required int32 node_col_finish = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_col_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_col_finish_)));
          set_has_node_col_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_compass;
        break;
      }

      // repeated int32 compass = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_compass())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_compass())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_compass;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PStructuredCellRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cell2node_offset = 1;
  if (has_cell2node_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cell2node_offset(), output);
  }

  // required int32 node_row_start = 2;
  if (has_node_row_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_row_start(), output);
  }

  // required int32 node_row_finish = 3;
  if (has_node_row_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->node_row_finish(), output);
  }

  // required int32 node_col_start = 4;
  if (has_node_col_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->node_col_start(), output);
  }

  // required int32 node_col_finish = 5;
  if (has_node_col_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->node_col_finish(), output);
  }

  // repeated int32 compass = 6;
  for (int i = 0; i < this->compass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->compass(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PStructuredCellRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cell2node_offset = 1;
  if (has_cell2node_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cell2node_offset(), target);
  }

  // required int32 node_row_start = 2;
  if (has_node_row_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_row_start(), target);
  }

  // required int32 node_row_finish = 3;
  if (has_node_row_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->node_row_finish(), target);
  }

  // required int32 node_col_start = 4;
  if (has_node_col_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->node_col_start(), target);
  }

  // required int32 node_col_finish = 5;
  if (has_node_col_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->node_col_finish(), target);
  }

  // repeated int32 compass = 6;
  for (int i = 0; i < this->compass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->compass(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PStructuredCellRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cell2node_offset = 1;
    if (has_cell2node_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell2node_offset());
    }

    // required int32 node_row_start = 2;
    if (has_node_row_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_row_start());
    }

    // required int32 node_row_finish = 3;
    if (has_node_row_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_row_finish());
    }

    // required int32 node_col_start = 4;
    if (has_node_col_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_col_start());
    }

    // required int32 node_col_finish = 5;
    if (has_node_col_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_col_finish());
    }

  }
  // repeated int32 compass = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->compass_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->compass(i));
    }
    total_size += 1 * this->compass_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PStructuredCellRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PStructuredCellRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PStructuredCellRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PStructuredCellRegion::MergeFrom(const PStructuredCellRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  compass_.MergeFrom(from.compass_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell2node_offset()) {
      set_cell2node_offset(from.cell2node_offset());
    }
    if (from.has_node_row_start()) {
      set_node_row_start(from.node_row_start());
    }
    if (from.has_node_row_finish()) {
      set_node_row_finish(from.node_row_finish());
    }
    if (from.has_node_col_start()) {
      set_node_col_start(from.node_col_start());
    }
    if (from.has_node_col_finish()) {
      set_node_col_finish(from.node_col_finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PStructuredCellRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PStructuredCellRegion::CopyFrom(const PStructuredCellRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PStructuredCellRegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PStructuredCellRegion::Swap(PStructuredCellRegion* other) {
  if (other != this) {
    std::swap(cell2node_offset_, other->cell2node_offset_);
    std::swap(node_row_start_, other->node_row_start_);
    std::swap(node_row_finish_, other->node_row_finish_);
    std::swap(node_col_start_, other->node_col_start_);
    std::swap(node_col_finish_, other->node_col_finish_);
    compass_.Swap(&other->compass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PStructuredCellRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PStructuredCellRegion_descriptor_;
  metadata.reflection = PStructuredCellRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PUnstructuredCellRegion::kNumUnstructuredCellsFieldNumber;
const int PUnstructuredCellRegion::kUnstructuredCellsOffsetFieldNumber;
#endif  // !_MSC_VER

PUnstructuredCellRegion::PUnstructuredCellRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PUnstructuredCellRegion::InitAsDefaultInstance() {
}

PUnstructuredCellRegion::PUnstructuredCellRegion(const PUnstructuredCellRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PUnstructuredCellRegion::SharedCtor() {
  _cached_size_ = 0;
  num_unstructured_cells_ = 0;
  unstructured_cells_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PUnstructuredCellRegion::~PUnstructuredCellRegion() {
  SharedDtor();
}

void PUnstructuredCellRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PUnstructuredCellRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PUnstructuredCellRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PUnstructuredCellRegion_descriptor_;
}

const PUnstructuredCellRegion& PUnstructuredCellRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PUnstructuredCellRegion* PUnstructuredCellRegion::default_instance_ = NULL;

PUnstructuredCellRegion* PUnstructuredCellRegion::New() const {
  return new PUnstructuredCellRegion;
}

void PUnstructuredCellRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_unstructured_cells_ = 0;
    unstructured_cells_offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PUnstructuredCellRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_unstructured_cells = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_unstructured_cells_)));
          set_has_num_unstructured_cells();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unstructured_cells_offset;
        break;
      }

      // required int32 unstructured_cells_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unstructured_cells_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unstructured_cells_offset_)));
          set_has_unstructured_cells_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PUnstructuredCellRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num_unstructured_cells = 1;
  if (has_num_unstructured_cells()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_unstructured_cells(), output);
  }

  // required int32 unstructured_cells_offset = 2;
  if (has_unstructured_cells_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unstructured_cells_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PUnstructuredCellRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num_unstructured_cells = 1;
  if (has_num_unstructured_cells()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_unstructured_cells(), target);
  }

  // required int32 unstructured_cells_offset = 2;
  if (has_unstructured_cells_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unstructured_cells_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PUnstructuredCellRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num_unstructured_cells = 1;
    if (has_num_unstructured_cells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_unstructured_cells());
    }

    // required int32 unstructured_cells_offset = 2;
    if (has_unstructured_cells_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unstructured_cells_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PUnstructuredCellRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PUnstructuredCellRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PUnstructuredCellRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PUnstructuredCellRegion::MergeFrom(const PUnstructuredCellRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_unstructured_cells()) {
      set_num_unstructured_cells(from.num_unstructured_cells());
    }
    if (from.has_unstructured_cells_offset()) {
      set_unstructured_cells_offset(from.unstructured_cells_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PUnstructuredCellRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUnstructuredCellRegion::CopyFrom(const PUnstructuredCellRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUnstructuredCellRegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PUnstructuredCellRegion::Swap(PUnstructuredCellRegion* other) {
  if (other != this) {
    std::swap(num_unstructured_cells_, other->num_unstructured_cells_);
    std::swap(unstructured_cells_offset_, other->unstructured_cells_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PUnstructuredCellRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PUnstructuredCellRegion_descriptor_;
  metadata.reflection = PUnstructuredCellRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PStructuredEdgeRegion::kInedge2NodeOffsetFieldNumber;
const int PStructuredEdgeRegion::kNodeRowStartFieldNumber;
const int PStructuredEdgeRegion::kNodeRowFinishFieldNumber;
const int PStructuredEdgeRegion::kNodeColStartFieldNumber;
const int PStructuredEdgeRegion::kNodeColFinishFieldNumber;
const int PStructuredEdgeRegion::kNodeCompassFieldNumber;
const int PStructuredEdgeRegion::kCellCompassFieldNumber;
#endif  // !_MSC_VER

PStructuredEdgeRegion::PStructuredEdgeRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PStructuredEdgeRegion::InitAsDefaultInstance() {
}

PStructuredEdgeRegion::PStructuredEdgeRegion(const PStructuredEdgeRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PStructuredEdgeRegion::SharedCtor() {
  _cached_size_ = 0;
  inedge2node_offset_ = 0;
  node_row_start_ = 0;
  node_row_finish_ = 0;
  node_col_start_ = 0;
  node_col_finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PStructuredEdgeRegion::~PStructuredEdgeRegion() {
  SharedDtor();
}

void PStructuredEdgeRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PStructuredEdgeRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PStructuredEdgeRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PStructuredEdgeRegion_descriptor_;
}

const PStructuredEdgeRegion& PStructuredEdgeRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesh_2eproto();
  return *default_instance_;
}

PStructuredEdgeRegion* PStructuredEdgeRegion::default_instance_ = NULL;

PStructuredEdgeRegion* PStructuredEdgeRegion::New() const {
  return new PStructuredEdgeRegion;
}

void PStructuredEdgeRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inedge2node_offset_ = 0;
    node_row_start_ = 0;
    node_row_finish_ = 0;
    node_col_start_ = 0;
    node_col_finish_ = 0;
  }
  node_compass_.Clear();
  cell_compass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PStructuredEdgeRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 inedge2node_offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inedge2node_offset_)));
          set_has_inedge2node_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_row_start;
        break;
      }

      // required int32 node_row_start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_row_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_row_start_)));
          set_has_node_row_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_node_row_finish;
        break;
      }

      // required int32 node_row_finish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_row_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_row_finish_)));
          set_has_node_row_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_node_col_start;
        break;
      }

      // required int32 node_col_start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_col_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_col_start_)));
          set_has_node_col_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_node_col_finish;
        break;
      }

      // required int32 node_col_finish = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_col_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_col_finish_)));
          set_has_node_col_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_node_compass;
        break;
      }

      // repeated int32 node_compass = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_compass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_node_compass())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_node_compass())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_node_compass;
        if (input->ExpectTag(56)) goto parse_cell_compass;
        break;
      }

      // repeated int32 cell_compass = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_compass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_cell_compass())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cell_compass())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cell_compass;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PStructuredEdgeRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 inedge2node_offset = 1;
  if (has_inedge2node_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->inedge2node_offset(), output);
  }

  // required int32 node_row_start = 2;
  if (has_node_row_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_row_start(), output);
  }

  // required int32 node_row_finish = 3;
  if (has_node_row_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->node_row_finish(), output);
  }

  // required int32 node_col_start = 4;
  if (has_node_col_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->node_col_start(), output);
  }

  // required int32 node_col_finish = 5;
  if (has_node_col_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->node_col_finish(), output);
  }

  // repeated int32 node_compass = 6;
  for (int i = 0; i < this->node_compass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->node_compass(i), output);
  }

  // repeated int32 cell_compass = 7;
  for (int i = 0; i < this->cell_compass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->cell_compass(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PStructuredEdgeRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 inedge2node_offset = 1;
  if (has_inedge2node_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->inedge2node_offset(), target);
  }

  // required int32 node_row_start = 2;
  if (has_node_row_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_row_start(), target);
  }

  // required int32 node_row_finish = 3;
  if (has_node_row_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->node_row_finish(), target);
  }

  // required int32 node_col_start = 4;
  if (has_node_col_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->node_col_start(), target);
  }

  // required int32 node_col_finish = 5;
  if (has_node_col_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->node_col_finish(), target);
  }

  // repeated int32 node_compass = 6;
  for (int i = 0; i < this->node_compass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->node_compass(i), target);
  }

  // repeated int32 cell_compass = 7;
  for (int i = 0; i < this->cell_compass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->cell_compass(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PStructuredEdgeRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 inedge2node_offset = 1;
    if (has_inedge2node_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inedge2node_offset());
    }

    // required int32 node_row_start = 2;
    if (has_node_row_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_row_start());
    }

    // required int32 node_row_finish = 3;
    if (has_node_row_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_row_finish());
    }

    // required int32 node_col_start = 4;
    if (has_node_col_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_col_start());
    }

    // required int32 node_col_finish = 5;
    if (has_node_col_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_col_finish());
    }

  }
  // repeated int32 node_compass = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->node_compass_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->node_compass(i));
    }
    total_size += 1 * this->node_compass_size() + data_size;
  }

  // repeated int32 cell_compass = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cell_compass_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cell_compass(i));
    }
    total_size += 1 * this->cell_compass_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PStructuredEdgeRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PStructuredEdgeRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PStructuredEdgeRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PStructuredEdgeRegion::MergeFrom(const PStructuredEdgeRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_compass_.MergeFrom(from.node_compass_);
  cell_compass_.MergeFrom(from.cell_compass_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inedge2node_offset()) {
      set_inedge2node_offset(from.inedge2node_offset());
    }
    if (from.has_node_row_start()) {
      set_node_row_start(from.node_row_start());
    }
    if (from.has_node_row_finish()) {
      set_node_row_finish(from.node_row_finish());
    }
    if (from.has_node_col_start()) {
      set_node_col_start(from.node_col_start());
    }
    if (from.has_node_col_finish()) {
      set_node_col_finish(from.node_col_finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PStructuredEdgeRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PStructuredEdgeRegion::CopyFrom(const PStructuredEdgeRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PStructuredEdgeRegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PStructuredEdgeRegion::Swap(PStructuredEdgeRegion* other) {
  if (other != this) {
    std::swap(inedge2node_offset_, other->inedge2node_offset_);
    std::swap(node_row_start_, other->node_row_start_);
    std::swap(node_row_finish_, other->node_row_finish_);
    std::swap(node_col_start_, other->node_col_start_);
    std::swap(node_col_finish_, other->node_col_finish_);
    node_compass_.Swap(&other->node_compass_);
    cell_compass_.Swap(&other->cell_compass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PStructuredEdgeRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PStructuredEdgeRegion_descriptor_;
  metadata.reflection = PStructuredEdgeRegion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
